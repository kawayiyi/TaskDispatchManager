<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

//  导入MultipleOutputHelper.ttinclude文件
<#@include file="$(SolutionDir)\TaskDispatchManager.Common\T4\MultipleOutputHelper.ttinclude"#> 

<#		

		var manager = Manager.Create(Host, GenerationEnvironment);  
		string connectionString= Manager.connectionString;		
		SqlConnection conn = new SqlConnection(connectionString);
		conn.Open();
	
		string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
		SqlCommand command = new SqlCommand(selectQuery,conn);
		SqlDataAdapter ad = new SqlDataAdapter(command);
		System.Data.DataSet ds = new DataSet(); 
  

		manager.StartNewFile("DbSessionExt.cs");
		System.Data.DataTable schema = conn.GetSchema("Tables");
		  	
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TaskDispatchManager.DAL;
using TaskDispatchManager.IDAL;


namespace TaskDispatchManager.DalFactory
{
    /// <summary>
    /// DbSession:本质就是一个简单工厂，就是这么一个简单工厂，但从抽象意义上来说，它就是整个数据库访问层的统一入口。
    /// 因为拿到了DbSession就能够拿到整个数据库访问层所有的dal。
    /// </summary>
    public partial class DbSession :IDbSession
    { 

		<#
		PushIndent("          ");
		foreach(System.Data.DataRow row in schema.Rows)
		{	
			ds.Tables.Clear();
			string tb_name= row["TABLE_NAME"].ToString();		
			command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
			ad.FillSchema(ds, SchemaType.Mapped,tb_name); 
		#>
			private I<#=tb_name#>Dal _<#=tb_name#>Dal;
			public I<#=tb_name#>Dal <#=tb_name#>Dal {
				get {
					if (_<#=tb_name#>Dal == null)
					{
						_<#=tb_name#>Dal = new <#=tb_name#>Dal();
					}
					return _<#=tb_name#>Dal;
				}
			}

		<#}
		PopIndent();
		#>
    }
}

<#
		manager.EndBlock();    
        conn.Close();  
       manager.Process(true);  
	    #> 